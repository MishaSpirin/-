using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MyChelsea
{
    public partial class Form1 : Form
    {
        SqlConnection sqlConnection;

        public Form1()
        {
            InitializeComponent();
        }

        private async void Form1_Load(object sender, EventArgs e)
        {
            string connectionString = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=D:\123\Kursova\MyChelsea\MyChelsea\Database1.mdf;Integrated Security=True";
            sqlConnection = new SqlConnection(connectionString);

            await sqlConnection.OpenAsync();

            SqlDataReader sqlReader = null;

            SqlCommand command = new SqlCommand("SELECT * FROM [Cars]", sqlConnection);

            try
            {
                sqlReader = await command.ExecuteReaderAsync();

                while (await sqlReader.ReadAsync())
                {
                    listBox1.Items.Add(Convert.ToString(sqlReader["Id"]) + "  " + Convert.ToString(sqlReader["Type_car"]) + "  " + Convert.ToString(sqlReader["Brands"]) + "  " + Convert.ToString(sqlReader["Number"]));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqlReader != null)
                    sqlReader.Close();
            }
        }

        private void вихідToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (sqlConnection != null && sqlConnection.State != ConnectionState.Closed)
                sqlConnection.Close();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (sqlConnection != null && sqlConnection.State != ConnectionState.Closed)
                sqlConnection.Close();
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            if (label4.Visible)
                label4.Visible = false;

            if (!string.IsNullOrEmpty(textBox1.Text) && !string.IsNullOrWhiteSpace(textBox1.Text) &&
                !string.IsNullOrEmpty(textBox2.Text) && !string.IsNullOrWhiteSpace(textBox2.Text) &&
                !string.IsNullOrEmpty(textBox3.Text) && !string.IsNullOrWhiteSpace(textBox3.Text))
            {

                SqlCommand command = new SqlCommand("INSERT INTO [Cars] (Type_car, Brands, Number) Values( @Type_car, @Brands, @Number)", sqlConnection);

                command.Parameters.AddWithValue("Type_car", textBox1.Text);

                command.Parameters.AddWithValue("Brands", textBox2.Text);

                command.Parameters.AddWithValue("Number", textBox3.Text);

                await command.ExecuteNonQueryAsync();
            }

            else
            {
                label4.Visible = true;
                label4.Text = "Поля 'Тип' 'Марка' і 'Номер' мають бути заповнені!";
            }
        }

        private async void обновитиToolStripMenuItem_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear();

            SqlDataReader sqlReader = null;

            SqlCommand command = new SqlCommand("SELECT * FROM [Cars]", sqlConnection);

            try
            {
                sqlReader = await command.ExecuteReaderAsync();

                while (await sqlReader.ReadAsync())
                {
                    listBox1.Items.Add(Convert.ToString(sqlReader["Id"]) + "  " + Convert.ToString(sqlReader["Type_car"]) + "  " + Convert.ToString(sqlReader["Brands"]) + "  " + Convert.ToString(sqlReader["Number"]));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message.ToString(), ex.Source.ToString(), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                if (sqlReader != null)
                    sqlReader.Close();
            }
        }

        private async void button2_Click(object sender, EventArgs e)
        {
            if (label9.Visible)
                label9.Visible = false;

            if (!string.IsNullOrEmpty(textBox4.Text) && !string.IsNullOrWhiteSpace(textBox4.Text) &&
                !string.IsNullOrEmpty(textBox5.Text) && !string.IsNullOrWhiteSpace(textBox5.Text) &&
                !string.IsNullOrEmpty(textBox6.Text) && !string.IsNullOrWhiteSpace(textBox6.Text) &&
                !string.IsNullOrEmpty(textBox7.Text) && !string.IsNullOrWhiteSpace(textBox7.Text))
            {
                SqlCommand command = new SqlCommand("UPDATE [Cars] SET [Type_car]=@Type_car, [Brands]=@Brands, [Number]=@Number WHERE [Id]=@Id", sqlConnection);
                
                command.Parameters.AddWithValue("Id", textBox7.Text);

                command.Parameters.AddWithValue("Type_car", textBox5.Text);

                command.Parameters.AddWithValue("Brands", textBox6.Text);

                command.Parameters.AddWithValue("Number", textBox4.Text);

                await command.ExecuteNonQueryAsync();
            }
            else if (!string.IsNullOrEmpty(textBox7.Text) && !string.IsNullOrWhiteSpace(textBox7.Text))
            {
               
                label9.Visible = true;
                label9.Text = "Поля 'ID' 'Тип' 'Марка' і 'Номер' мають бути заповнені!";
            }
            else
            {
                label9.Visible = true;
                label9.Text = "Id має бути заповнений!";
            }
        }

        private async void button3_Click(object sender, EventArgs e)
        {
            if (label10.Visible)
                label10.Visible = false;

            if (!string.IsNullOrEmpty(textBox8.Text) && !string.IsNullOrWhiteSpace(textBox8.Text))
            {
                SqlCommand command = new SqlCommand("DELETE FROM [Cars] WHERE [Id]=@id", sqlConnection);

                command.Parameters.AddWithValue("Id", textBox8.Text);

                await command.ExecuteNonQueryAsync();
            }

            else
            {
                label10.Visible = true;
                label10.Text = "Id має бути заповнений!";
            }
        }

        private async void button4_Click(object sender, EventArgs e)
        {
            if (label13.Visible)
                label13.Visible = false;

            if (!string.IsNullOrEmpty(textBox9.Text) && !string.IsNullOrWhiteSpace(textBox9.Text))
            {
                SqlCommand command = new SqlCommand("SELECT * FROM [Cars] WHERE [Number] LIKE '%' ", sqlConnection);

                command.Parameters.AddWithValue("Number", textBox9.Text);

                await command.ExecuteNonQueryAsync();
            }
            else
            {
                label13.Visible = true;
                label13.Text = "Поле номеру має бути заповнене!";
            }
        }
    }
}
